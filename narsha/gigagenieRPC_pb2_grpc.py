# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import gigagenieRPC_pb2 as gigagenieRPC__pb2


class GigagenieStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.
    Args:
      channel: A grpc.Channel.
    """
    self.getVoice2Text = channel.stream_stream(
        '/kt.gigagenie.ai.speech.Gigagenie/getVoice2Text',
        request_serializer=gigagenieRPC__pb2.reqVoice.SerializeToString,
        response_deserializer=gigagenieRPC__pb2.resText.FromString,
        )
    self.getText2VoiceUrl = channel.unary_unary(
        '/kt.gigagenie.ai.speech.Gigagenie/getText2VoiceUrl',
        request_serializer=gigagenieRPC__pb2.reqText.SerializeToString,
        response_deserializer=gigagenieRPC__pb2.resUrl.FromString,
        )
    self.getText2VoiceStream = channel.unary_stream(
        '/kt.gigagenie.ai.speech.Gigagenie/getText2VoiceStream',
        request_serializer=gigagenieRPC__pb2.reqText.SerializeToString,
        response_deserializer=gigagenieRPC__pb2.resVoice.FromString,
        )
    self.queryByText = channel.unary_unary(
        '/kt.gigagenie.ai.speech.Gigagenie/queryByText',
        request_serializer=gigagenieRPC__pb2.reqQueryText.SerializeToString,
        response_deserializer=gigagenieRPC__pb2.resQueryText.FromString,
        )
    self.queryByVoice = channel.stream_unary(
        '/kt.gigagenie.ai.speech.Gigagenie/queryByVoice',
        request_serializer=gigagenieRPC__pb2.reqQueryVoice.SerializeToString,
        response_deserializer=gigagenieRPC__pb2.resQueryText.FromString,
        )


class GigagenieServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def getVoice2Text(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getText2VoiceUrl(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getText2VoiceStream(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def queryByText(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def queryByVoice(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GigagenieServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getVoice2Text': grpc.stream_stream_rpc_method_handler(
          servicer.getVoice2Text,
          request_deserializer=gigagenieRPC__pb2.reqVoice.FromString,
          response_serializer=gigagenieRPC__pb2.resText.SerializeToString,
      ),
      'getText2VoiceUrl': grpc.unary_unary_rpc_method_handler(
          servicer.getText2VoiceUrl,
          request_deserializer=gigagenieRPC__pb2.reqText.FromString,
          response_serializer=gigagenieRPC__pb2.resUrl.SerializeToString,
      ),
      'getText2VoiceStream': grpc.unary_stream_rpc_method_handler(
          servicer.getText2VoiceStream,
          request_deserializer=gigagenieRPC__pb2.reqText.FromString,
          response_serializer=gigagenieRPC__pb2.resVoice.SerializeToString,
      ),
      'queryByText': grpc.unary_unary_rpc_method_handler(
          servicer.queryByText,
          request_deserializer=gigagenieRPC__pb2.reqQueryText.FromString,
          response_serializer=gigagenieRPC__pb2.resQueryText.SerializeToString,
      ),
      'queryByVoice': grpc.stream_unary_rpc_method_handler(
          servicer.queryByVoice,
          request_deserializer=gigagenieRPC__pb2.reqQueryVoice.FromString,
          response_serializer=gigagenieRPC__pb2.resQueryText.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kt.gigagenie.ai.speech.Gigagenie', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))